package com.stsprojSample.home.HelloController;

import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.json.simple.JSONArray;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.stsprojSample.home.MessageVo.MessageVo;
import com.stsprojSample.home.TemplateService.TemplateService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;


@Tag(name="HelloController", description="HelloController API")
@Controller
public class HelloController {
	
	private MultipartFile multipartFile ; // 사용자가 받아온 파일
	private File saveFile; 
	private String fPath;
	private MultipartFile tempFile; // 임시파일
	
	private final TemplateService templateService;

    public HelloController(TemplateService ts) {
        this.templateService = ts;
    }

	@RequestMapping("/hello")
	public String main() {
		return "index";
	}
	
	@GetMapping("/unity")
	public String Unity() {
		
		return "metaverse";
	}
	
	@Operation(summary="테스트용", description="테스트용 api입니다.")
	@PostMapping("/selectMessge")
	@ResponseBody
	public String SelectMessge(@RequestBody MessageVo params) {
		
		List selList = templateService.SelectMessge(params);
		
		return JSONArray.toJSONString(selList);
		
	}
	
	@Operation(summary="이미지 미리보기", description=" 채팅 이미지 전송 api")
	@PostMapping(value="/filePreview", produces="application/json;charset=UTF-8")
	@ResponseBody
	public void FilePreview(MultipartHttpServletRequest req,HttpServletResponse response, HttpServletRequest request) throws Exception {
		
		MultipartFile file = req.getFile("file");
		
		multipartFile = file;

		//String fileName =multipartFile.getOriginalFilename();
		String fileName = new String(file.getOriginalFilename().getBytes("ISO-8859-1"), "UTF-8");
		fPath = "c:\\Temp\\"+File.separator+fileName;
		saveFile = new File(fPath);	
		
		file.transferTo(saveFile);
		
		tempFile = file;
	}
	
	@Operation(summary="이미지 미리보기", description=" 채팅 이미지 전송 api")
	@RequestMapping(value="/filePreview2",method = RequestMethod.GET, produces="application/json;charset=UTF-8")
	public void FilePreview2(MultipartHttpServletRequest req,HttpServletResponse response, HttpServletRequest request) throws Exception {
		
String contentType = "image/*";
		
        long fileLength = saveFile.length();
        //파일의 크기와 같지 않을 경우 프로그램이 멈추지 않고 계속 실행되거나, 잘못된 정보가 다운로드 될 수 있다.
        
        response.setHeader("Content-Disposition", "attachment; filename=\"" + multipartFile.getOriginalFilename() + "\";");
        response.setHeader("Content-Transfer-Encoding", "binary");
        response.setHeader("Content-Type", contentType);
        response.setHeader("Content-Length", "" + fileLength);
        response.setHeader("Pragma", "no-cache;");
        response.setHeader("Expires", "-1;");
               
        try(
 		
    		FileInputStream fis = new FileInputStream(fPath);
            OutputStream out = response.getOutputStream();
    		
        ){
            int readCount = 0;
            byte[] buffer = new byte[1024];
            while((readCount = fis.read(buffer)) != -1){
            	out.write(buffer,0,readCount);
            }
        }catch(Exception ex){
            throw new RuntimeException("file Save Error");
        }
        
    	saveFile.deleteOnExit();
	}

}
